Chapter 2
2.1 퍼셉트론이란?

다수의 신회를 입력으로 받아 하나의 신호를 출력하는 것을 뜻함
입력신호가 뉴런(노드)에 보내질 때는 각각 고유한 가중치가 곱해진다
뉴런에서 보내온 신호의 총합이 정해진 한계를 넘어설 때만 1을 출력
그 한계를 임계값이라 표현, 세타 기호로 나타낸다
2.2 단순한 논리회로

AND 게이트

입력이 둘이고 출력이 하나이다
입력 신호와 출혁 신호의 대응을 진리표라 한다
입력이 모두 1일때만 1을 출력하고 그 외는 0을 출력
NAND 게이트

NAND는 Not AND를 의미하며 동작은 AND 게이트를 뒤집은 것을 나타낸다.
입력이 모두 1일때만 0을 출력하고 그 외는 1을 출력
OR 게이트

입력 신호 중 하나 이상이 1이면 출력이 1이 되는 논리회로
2.3 퍼셉트론 구현하기

[ ]
간단한 구현부터
[1]
def AND(x1, x2):
  w1,w2, theta=0.5,0.5,0.7
  tmp=x1*w1+x2*w2
  if tmp<=theta:
    return 0
  elif tmp>theta:
    return 1
[2]
0초
print(AND(0,0)) 
print(AND(1,0))
print(AND(0,1))
print(AND(1,1))
0
0
0
1
더블클릭 또는 Enter 키를 눌러 수정

[ ]
가중치와 편향 도입
[3]
0초
import numpy as np
x=np.array([0,1]) # 입력
w=np.array([0.5,0.5]) # 가중치
b=-0.7 # 편향
print(w*x)
print(np.sum(w*x)) #np.sum() 메서드는 입력한 배열에 담긴 모든 원소의 총합을 계산 
print(np.sum(w*x)+b) # 대략 -0.2 (부동소수점 수에 의한 연산 오차)
[0.  0.5]
0.5
-0.19999999999999996
가중치와 편향 구현하기

[4]
def AND(x1, x2):
  x=np.array([x1,x2]) # 입력
  w=np.array([0.5,0.5]) # 가중치
  b=-0.7 # 편향
  tmp=np.sum(w*x)+b
  if tmp<=0:
    return 0
  else:
    return 1
w1 & w2는 입력신호가 결과에 주는 영향력(중요도)을 조절하는 매개변수임
편향은 뉴런이 얼마나 쉽게 활성화(결과로 1을 출력)하느냐를 조정하는 매개변수임
[5]
def NAND(x1,x2):
  x=np.array([x1,x2])
  w=np.array([-0.5,-0.5]) # AND랑 가중치(w와 b)만 다르다
  b=0.7
  tmp=np.sum(w*x)+b
  if tmp<=0:
    return 0
  else:
    return 1
def OR(x1,x2):
  x=np.array([x1,x2])
  w=np.array([0.5,0.5]) # AND랑 가중치(w와 b)만 다르다
  b=-0.2
  tmp=np.sum(w*x)+b
  if tmp<=0:
    return 0
  else:
    return 1
2.4 퍼셉트론의 한계

도전!XOR 게이트

베타적 논리합이라는 논리회로임
한쪽이 1일 때만 1을 출력한다
비선형 영역: 직선의 영역으로 XOR게이트 구현 불가
선형 영역: 곡선의 영역으로 XOR게이트 구현 가능
2.5 다층 퍼셉트론이 출동한다면

*   퍼셉트론의 아름다움은 층을 쌓아 다층 퍼셉트론을 만들 수 있다
기존 게이트 조합하기

x1과 x2는 NAND와 OR게이트의 입력이 되고 NAND와 OR게이트의 출력이 AND게이트의 입력으로 이어진다
[6]
0초
def XOR(x1,x2):
  s1 = NAND(x1,x2)
  s2 = OR(x1,x1)
  y = AND(s1,s2)
  return y
print(XOR(0,0)) 
print(XOR(1,0)) 
print(XOR(0,1)) 
print(XOR(1,1))
0
1
0
0
2.6 NAND에서 컴퓨터까지

*   NAND 게이트로 컴퓨터를 만들 수 있음
*   퍼셉트론은 층을 거듭 쌓으면 비 선형적인 표현도, 이론상 컴퓨터가 수행하는 처리도 모두 가능함
